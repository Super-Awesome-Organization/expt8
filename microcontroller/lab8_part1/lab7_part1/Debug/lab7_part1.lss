
lab7_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d2c  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b35  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ab0  00000000  00000000  00001b11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  000025c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000139b9  00000000  00000000  00002678  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a3  00000000  00000000  00016031  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000160d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000487e  00000000  00000000  00016124  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
   e:	00 00       	nop
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop
  34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
  36:	00 00       	nop
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
  52:	00 00       	nop
  54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
  56:	00 00       	nop
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2a c0       	rjmp	.+84     	; 0xe2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	28 c0       	rjmp	.+80     	; 0xe2 <__bad_interrupt>
  92:	00 00       	nop
  94:	26 c0       	rjmp	.+76     	; 0xe2 <__bad_interrupt>
  96:	00 00       	nop
  98:	24 c0       	rjmp	.+72     	; 0xe2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	22 c0       	rjmp	.+68     	; 0xe2 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	20 c0       	rjmp	.+64     	; 0xe2 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	1e c0       	rjmp	.+60     	; 0xe2 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	1c c0       	rjmp	.+56     	; 0xe2 <__bad_interrupt>
	...

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d5 e0       	ldi	r29, 0x05	; 5
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 30       	cpi	r26, 0x00	; 0
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a0 30       	cpi	r26, 0x00	; 0
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	3b d0       	rcall	.+118    	; 0x156 <main>
  e0:	4a c0       	rjmp	.+148    	; 0x176 <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  e4:	08 95       	ret

000000e6 <SPI_MasterInit>:

void SPI_MasterInit(void)
{
	/* Set MOSI and SCK output, all others input */
	//SS are active low so disable ACC and BT by setting them high
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<ACC_SS);
  e6:	86 e1       	ldi	r24, 0x16	; 22
  e8:	84 b9       	out	0x04, r24	; 4
	DDRE = (1<<BT_SS);
  ea:	84 e0       	ldi	r24, 0x04	; 4
  ec:	8d b9       	out	0x0d, r24	; 13

	/* Enable SPI, Master, set clock rate fck/16 */

	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  ee:	81 e5       	ldi	r24, 0x51	; 81
  f0:	8c bd       	out	0x2c, r24	; 44
  f2:	08 95       	ret

000000f4 <init>:
	
}

void init()
{
		board_init();
  f4:	f7 df       	rcall	.-18     	; 0xe4 <board_init>

		//Set Input/Output settings for ports
		DDRC = 0b10000000;
  f6:	80 e8       	ldi	r24, 0x80	; 128
  f8:	87 b9       	out	0x07, r24	; 7
		DDRD = 0xff;
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	8a b9       	out	0x0a, r24	; 10
		
		//Set read_key = 0;
		PORTC = 0x0;
				
		SPI_MasterInit();
  fe:	18 b8       	out	0x08, r1	; 8
 100:	f2 cf       	rjmp	.-28     	; 0xe6 <SPI_MasterInit>
 102:	08 95       	ret

00000104 <SPI_MasterTransmit>:
}
void SPI_MasterTransmit(char cData)
{
	/* Start transmission */

	SPDR = cData;
 104:	8e bd       	out	0x2e, r24	; 46

	/* Wait for transmission complete */

	while(!(SPSR & (1<<SPIF)))
 106:	0d b4       	in	r0, 0x2d	; 45
 108:	07 fe       	sbrs	r0, 7
 10a:	fd cf       	rjmp	.-6      	; 0x106 <SPI_MasterTransmit+0x2>
	;
}
 10c:	08 95       	ret

0000010e <EEPROM_Write>:
void EEPROM_Write(char x){
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	d8 2f       	mov	r29, r24
		//Enable EEPROM write
		PORTB = !(1<<EEPROM_SS);
 114:	15 b8       	out	0x05, r1	; 5
		SPI_MasterTransmit((char) 0x06);
 116:	86 e0       	ldi	r24, 0x06	; 6
 118:	f5 df       	rcall	.-22     	; 0x104 <SPI_MasterTransmit>
		PORTB = 1<<EEPROM_SS;
 11a:	c1 e0       	ldi	r28, 0x01	; 1
 11c:	c5 b9       	out	0x05, r28	; 5
		PORTB = !(1<<EEPROM_SS);
 11e:	15 b8       	out	0x05, r1	; 5
		//Start Write Sequence
		SPI_MasterTransmit((char) 0x02);
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	f0 df       	rcall	.-32     	; 0x104 <SPI_MasterTransmit>
		//Write to address 0 by sending 0 for 24 bytes
		SPI_MasterTransmit((char) 0x00);
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	ee df       	rcall	.-36     	; 0x104 <SPI_MasterTransmit>
		SPI_MasterTransmit((char) 0x00);
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	ec df       	rcall	.-40     	; 0x104 <SPI_MasterTransmit>
		SPI_MasterTransmit((char) 0x00);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	ea df       	rcall	.-44     	; 0x104 <SPI_MasterTransmit>
 130:	8d 2f       	mov	r24, r29
		//Place Data in address 0
		SPI_MasterTransmit(x);
 132:	e8 df       	rcall	.-48     	; 0x104 <SPI_MasterTransmit>
 134:	c5 b9       	out	0x05, r28	; 5
 136:	df 91       	pop	r29
		PORTB = 1<<EEPROM_SS;
 138:	cf 91       	pop	r28
	
}
 13a:	08 95       	ret

0000013c <EEPROM_Read>:
 13c:	15 b8       	out	0x05, r1	; 5
 13e:	83 e0       	ldi	r24, 0x03	; 3
 char EEPROM_Read(){
	//Enable EEPROM write
	PORTB = !(1<<EEPROM_SS);
	SPI_MasterTransmit((char) 0x03);
 140:	e1 df       	rcall	.-62     	; 0x104 <SPI_MasterTransmit>

	//Read from address 0 by sending 0 for 24 bytes
	SPI_MasterTransmit((char) 0x00);
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	df df       	rcall	.-66     	; 0x104 <SPI_MasterTransmit>
	SPI_MasterTransmit((char) 0x00);
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	dd df       	rcall	.-70     	; 0x104 <SPI_MasterTransmit>
	SPI_MasterTransmit((char) 0x00);
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	db df       	rcall	.-74     	; 0x104 <SPI_MasterTransmit>
 14e:	8e b5       	in	r24, 0x2e	; 46
{
	/* Wait for reception complete /
	while(!(SPSR & (1<<SPIF)))
	;
	/ Return Data Register */
	return SPDR;
 150:	91 e0       	ldi	r25, 0x01	; 1
	SPI_MasterTransmit((char) 0x00);
	SPI_MasterTransmit((char) 0x00);
	SPI_MasterTransmit((char) 0x00);
	//Place Data in address 0
	char out = SPI_SlaveReceive();
	PORTB = 1<<EEPROM_SS;
 152:	95 b9       	out	0x05, r25	; 5
 154:	08 95       	ret

00000156 <main>:
	return out;
	
}
 156:	ce df       	rcall	.-100    	; 0xf4 <init>

int main (void)
{
	init();
	//Deactivate read enable
	PORTC = 0b00000000;
 158:	18 b8       	out	0x08, r1	; 8
	
	EEPROM_Write((char) KEY);
 15a:	89 e6       	ldi	r24, 0x69	; 105
	
	
	FPGA_BUS = EEPROM_Read();
 15c:	d8 df       	rcall	.-80     	; 0x10e <EEPROM_Write>
 15e:	ee df       	rcall	.-36     	; 0x13c <EEPROM_Read>
 160:	8b b9       	out	0x0b, r24	; 11
	
	//Activate Read Enable
	PORTC = 0b10000000;
 162:	80 e8       	ldi	r24, 0x80	; 128
 164:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	83 e2       	ldi	r24, 0x23	; 35
 168:	94 ef       	ldi	r25, 0xF4	; 244
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <main+0x14>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x1a>
 170:	00 00       	nop
	_delay_ms (250);
	PORTC = 0b00000000;
 172:	18 b8       	out	0x08, r1	; 8
 174:	ff cf       	rjmp	.-2      	; 0x174 <main+0x1e>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
